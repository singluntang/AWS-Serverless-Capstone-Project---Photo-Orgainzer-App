# org: programming.website@outlook.com
# app: photo-organizer-app

service: 
  name: serverless-organizer-app

plugins:
  - serverless-webpack
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation
  - serverless-iam-roles-per-function

  #################################
  #For Offline Only
  #################################
  # - serverless-dynamodb-local
  # - serverless-offline 
  # - serverless-s3-local
  # - serverless-apigw-binary
  # - serverless-apigwy-binary

# package:
#   individually: true   

provider:
  name: aws
  runtime: nodejs12.x
  memorySize: 2024
  timeout: 10  

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-2'}
  accountId: ${opt:account, 'AWS::ACCOUNTID'}

  tracing:
    lambda: true
    apiGateway: true

  environment:
    APPS_NAME: "serverless-organizer-app-${self:provider.stage}"
    GROUPS_TABLE: "Groups-${self:provider.stage}"
    FEEDS_TABLE: "Feeds-${self:provider.stage}"
    IMAGE_ID_INDEX: ImageIdIndex
    CONNECTIONS_TABLE: "Connections-${self:provider.stage}"
    IMAGES_S3_BUCKET: photo-organizer-alan-images-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 1000
    THUMBNAILS_S3_BUCKET: photo-organizer-alan-thumbnails-${self:provider.stage}
    BUCKET_REGION: ${self:provider.region}
    IS_OFFLINE: "False" #Either True or False


    #################################
    #For Offline Only
    #################################    
    # S3_BUCKET_ENDPOINT: 'http://localhost:4569'
    # DYNAMODB_ENDPOINT: 'http://localhost:8000'

  iamRoleStatements:
    - Effect: Allow
      Action:
        xray:PutTraceSegments
      Resource: 
        'arn:aws:xray:${self:provider.region}:${self:provider.accountId}:group/Default' 
    - Effect: Allow
      Action:
        codedeploy:*
      Resource: '*'               

custom: 
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true  
  documentation:
    api:
      info:
        version: "2"
        title: "Organizer API"
        description: "Serverless application for images sharing"
    models: 
      -  
        name: FeedRequest
        description: "Model for Feed Request"
        contentType: application/json
        schema: ${file(models/create-feed-request.json)}


  #################################
  #For Offline Only
  ################################# 
  # serverless-offline:
  #   lambdaPort: 3000
  #   babelOptions:
  #     presets: ["es2015"]    
  # dynamodb:
  #   stages:
  #     - ${self:provider.stage}     
  #   start:
  #     port: 8000
  #     inMemory: true
  #     migrate: true
  # apigwBinary:
  #   types:
  #     - 'image/jpeg' 
  #     - '*/*'            
  # s3:
  #   host: localhost
    # directory: /tmp

functions:

  RS256Auth:
    handler: src/lambda/auth/rs256Auth0Authorizer.handler 
    iamRoleStatementsInherit: true          
                      
  GetFeeds:
    handler: src/lambda/http/getFeeds.handler
    events:
      - http:
          method: get
          path: groups/{groupId}/feeds
          authorizer: RS256Auth
          cors: true
    iamRoleStatementsInherit: true          
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
        Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.FEEDS_TABLE}"  
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.FEEDS_TABLE}/index/${self:provider.environment.IMAGE_ID_INDEX}"        
      
  CreateFeed:
    handler: src/lambda/http/createFeed.handler
    events:
      - http:
          method: post
          path: groups/{groupId}/feeds
          authorizer: RS256Auth
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new Feed
            description: Create a new Feed
            requestModels:
              'application/json': FeedRequest  
    iamRoleStatementsInherit: true               
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.FEEDS_TABLE}"
      - Effect: Allow
        Action:
          - s3:GetSignedUrl
        Resource: "arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*"          

  DeleteFeed:
    handler: src/lambda/http/deleteFeed.handler
    events:
      - http:
          method: patch
          path: feeds/{imageId}
          authorizer: RS256Auth
          cors: true
    iamRoleStatementsInherit: true               
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.FEEDS_TABLE}"
      - Effect: Allow
        Action:
          - s3:DeleteObject
        Resource: "arn:aws:s3:::${self:provider.environment.THUMBNAILS_S3_BUCKET}/*"    
      - Effect: Allow
        Action:
          - s3:DeleteObject
        Resource: "arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*"                 
        
  CreateGroup:
    handler: src/lambda/http/createGroup.handler
    events:
      - http:
          method: post
          path: groups
          authorizer: RS256Auth
          cors: true         
    iamRoleStatementsInherit: true               
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
        Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.GROUPS_TABLE}" 
      - Effect: Allow
        Action:
          - dynamodb:BatchWriteItem
        Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.GROUPS_TABLE}"                    
  
  ResizeImage:           
    handler: src/lambda/s3/resizeImage.handler
    events:
      - s3:
          bucket: ${self:provider.environment.IMAGES_S3_BUCKET}   
          event: s3:ObjectCreated:Put      
    iamRoleStatementsInherit: true               
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.FEEDS_TABLE}"
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: "arn:aws:s3:::${self:provider.environment.THUMBNAILS_S3_BUCKET}/*"    
      - Effect: Allow
        Action:
          - s3:GetObject
        Resource: "arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*" 
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: "arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*"         


  #################################
  #For Offline Only
  ################################# 

  # UploadImageFile:
  #   handler: src/lambda/http/uploadFile.handler
  #   events:
  #     - http: ANY /imageUpload/{imageId}  
  #     - contentHandling: CONVERT_TO_BINARY 
      
  # ProcessImageFile:
  #   handler: src/lambda/s3/resizeLocalImage.handler
  #   events:
  #     - http: ANY /processimage/{imageId}   

resources:   
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId: 
          Ref: ApiGatewayRestApi

    GroupsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S                     
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.GROUPS_TABLE}

    FeedsDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: imageId
            AttributeType: S
        KeySchema:
          - AttributeName: imageId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        StreamSpecification:
          StreamViewType: NEW_IMAGE
        TableName: ${self:provider.environment.FEEDS_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.IMAGE_ID_INDEX}
            KeySchema:
            - AttributeName: imageId
              KeyType: HASH
            Projection:
              ProjectionType: ALL


    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId: 
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    BucketResizePhotos:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.THUMBNAILS_S3_BUCKET}        

    # BucketPhotos:
    #   Type: AWS::S3::Bucket
    #   # DependsOn: 
    #   #   - ImagesTopicPolicy    
    #   Properties:
    #     BucketName: ${self:provider.environment.IMAGES_S3_BUCKET}
    #     # NotificationConfiguration:
    #     #   TopicConfigurations:
    #     #     - Event: s3:ObjectCreated:Put
    #     #       Topic: 
    #     #         Ref: ImagesTopic                                 
    #     CorsConfiguration:
    #       CorsRules:
    #         -
    #           AllowedOrigins:
    #             - '*'
    #           AllowedHeaders:
    #             - '*'
    #           AllowedMethods:
    #             - GET
    #             - PUT
    #             - POST
    #             - DELETE
    #             - HEAD
    #           MaxAge: 3000           

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyBucketPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal:
                AWS: 'arn:aws:iam::${self:provider.accountId}:root'
              Action: 
                - "s3:GetObject"
                - "s3:PutObject"
                - "s3:DeleteObject"
              Resource: "arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*"
        Bucket: ${self:provider.environment.IMAGES_S3_BUCKET}

    ResizePhotosBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyResizeBucketPolicy 
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal:
                AWS: 'arn:aws:iam::${self:provider.accountId}:root'
              Action: 
                - "s3:GetObject"
                - "s3:PutObject"
                - "s3:DeleteObject"
              Resource: "arn:aws:s3:::${self:provider.environment.THUMBNAILS_S3_BUCKET}/*"
        Bucket: 
          Ref: BucketResizePhotos                    


    # ResizePermissionResizePhotosS3:
    #   Type: AWS::Lambda::Permission
    #   Properties:
    #     FunctionName: 
    #       Ref: ResizeImageLambdaFunction
    #     Principal: 'arn:aws:iam::${self:provider.accountId}:root'
    #     Action: lambda:InvokeFunction
    #     SourceAccount: "${self:provider.accountId}"
    #     SourceArn: arn:aws:s3:::${self:provider.environment.THUMBNAILS_S3_BUCKET}/* 
              

    # ImagesTopic:
    #   Type: AWS::SNS::Topic
    #   Properties:
    #     DisplayName: "Image bucket topic"
    #     TopicName: "resizeImage-${self:provider.stage}"

    # ImagesTopicPolicy:
    #   Type: AWS::SNS::TopicPolicy
    #   DependsOn:
    #     - ImagesTopic      
    #   Properties:
    #     PolicyDocument:
    #       Id: MyTopicPolicy
    #       Version: "2012-10-17"
    #       Statement:
    #         - Sid: AllowServerlessFrameworkEnterpriseToPublish
    #           Effect: Allow
    #           Principal:
    #             AWS: 'arn:aws:iam::${self:provider.accountId}:root'
    #           Action: "sns:Publish"
    #           Resource: arn:aws:sns:${self:provider.region}:${self:provider.accountId}:resizeImage-${self:provider.stage}
    #             # Ref: ImagesTopic             
    #     Topics:
    #       - Ref: ImagesTopic    
          
    # LocalS3Bucket:
    #   Type: AWS::S3::Bucket
    #   Properties:
    #     BucketName: ${self:provider.environment.IMAGES_S3_BUCKET}


    # LocalS3ThumbnailBucket:
    #   Type: AWS::S3::Bucket
    #   Properties:
    #     BucketName: ${self:provider.environment.THUMBNAILS_S3_BUCKET}                    